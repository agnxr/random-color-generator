{"version":3,"sources":["components/App/Button/Button.js","components/App/App.js","index.js"],"names":["Button","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","onClick","props","React","Component","App","_this","call","state","color","handleClick","bind","assertThisInitialized","setState","chooseColor","applyColor","prevProps","prevState","rgbArray","join","formatColor","document","body","style","background","random","i","push","Math","floor","Button_Button_Button","ReactDOM","render","components_App_App","getElementById"],"mappings":"qPAGaA,SAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEE,OACUC,EAAAC,EAAAC,cAAA,UAAQC,QAASZ,KAAKa,MAAMD,SAA5B,eAHZhB,EAAA,CAA4BkB,IAAMC,YCmEnBC,qBA3Db,SAAAA,EAAYH,GAAM,IAAAI,EAAA,OAAAnB,OAAAC,EAAA,EAAAD,CAAAE,KAAAgB,IAChBC,EAAAnB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkB,GAAAE,KAAAlB,KAAMa,KAEDM,MAAQ,CAAEC,MAAO,CAAC,IAAK,GAAI,MAIlCH,EAAKI,YAAcJ,EAAKI,YAAYC,KAAjBxB,OAAAyB,EAAA,EAAAzB,CAAAmB,IAPDA,6EAYhBjB,KAAKwB,SAAS,CACZJ,MAAOpB,KAAKyB,4DAKdzB,KAAK0B,wDAGYC,EAAWC,GAC5B5B,KAAK0B,iDAIKG,GACV,MAAO,OAASA,EAASC,KAAK,MAAQ,yCAItC,IAAMV,EAAQpB,KAAK+B,YAAY/B,KAAKmB,MAAMC,OAC1CY,SAASC,KAAKC,MAAMC,WAAaf,wCAMjC,IADA,IAAMgB,EAAS,GACNC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAOE,KAAKC,KAAKC,MAAoB,IAAdD,KAAKH,WAE9B,OAAOA,mCAKP,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACGX,KAAK+B,YAAY/B,KAAKmB,MAAMC,QAE/BX,EAAAC,EAAAC,cAAC8B,EAAD,CACE7B,QAASZ,KAAKqB,sBAvDNP,IAAMC,YCHxB2B,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASZ,SAASa,eAAe","file":"static/js/main.527d4663.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nexport class Button extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n            <button onClick={this.props.onClick}>\r\n\t\t\t\tRefresh\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\nimport { Button } from './Button/Button';\nimport './App.css';\n\n//this component‘s job is to:\n//a) store a random color, \n//b) use that color to update the screen’s background.\n\nclass App extends React.Component {\n\n  //1. store a random color as state.\n  constructor(props){\n    super(props);\n    //display color in rgb format using 3 numbers between 0 and 255 -> color: [red, green, blue]\n    this.state = { color: [153, 51, 255] }\n  //  this.state = { color: [0, 102, 204] }\n\n  //3. bind with handleClick -> this.handleClick() will update this.state.color to a new, random color.\n  this.handleClick = this.handleClick.bind(this);\n  }\n\n  //2. define an event handler to update this.state.color to a new random color.\n  handleClick() {\n    this.setState({ //the method uses this, so I need to bind it.\n      color: this.chooseColor()\n    });\n  }\n\n  componentDidMount() {\n    this.applyColor();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.applyColor();\n  }\n\n  //transform an array(eg. 15351255) into rgb format: rgb(153, 51, 255)\n  formatColor(rgbArray) {\n    return 'rgb(' + rgbArray.join(', ') + ')';\n  }\n\n  applyColor() {\n    const color = this.formatColor(this.state.color);\n    document.body.style.background = color;\n  }\n\n  //choose 3 random numbers 0-255\n  chooseColor() {\n    const random = [];\n    for (let i = 0; i < 3; i++) {\n      random.push(Math.floor(Math.random()*256));\n    }\n    return random;\n  }\n\n  //inform about the color\n  render() {\n    return (\n      <div>\n        <h1>\n          {this.formatColor(this.state.color)}\n        </h1>\n        <Button \n          onClick={this.handleClick} \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n"],"sourceRoot":""}